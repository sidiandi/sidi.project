<?xml version="1.0" encoding="utf-8"?>
<!-- 
Copyright 2018 by andreas
This file is part of _ProductName_.

_ProductName_ is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

_ProductName_ is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with hagen. If not, see <http://www.gnu.org/licenses/>.


-->
<Project DefaultTargets="Bootstrap" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Import Project="Paths.props" />

  <UsingTask  
    TaskName="CreatePackageVersionProps"  
    TaskFactory="CodeTaskFactory"  
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll" >  
    <ParameterGroup>  
      <SolutionDir Required="true" />
      <PropsFile Required="true" />
    </ParameterGroup>  
    <Task>  
      <Reference Include="System.Xml" />
      <Reference Include="System.Xml.Linq" />  
      <Using Namespace="System.Xml.Linq" />  
      <Using Namespace="System.Text.RegularExpressions" />  
      <Code Type="Fragment" Language="cs"><![CDATA[  
      
var props = String.Empty;

var packagesFiles = Directory.GetDirectories(SolutionDir).Concat(new[]{SolutionDir})
	.Select(_ => Path.Combine(_, "packages.config"))
	.Where(_ => File.Exists(_))
	.ToList();

foreach (var packagesFile in packagesFiles)
{
	var doc = XDocument.Load(packagesFile);
	props = props + "\r\n" + String.Join("\r\n", doc.Root.Elements().Select(p => 
	{
		var propertyName = "NugetPackageVersion_" + Regex.Replace(p.Attribute("id").Value, "[^\\w]", "_");
		var value = p.Attribute("version").Value;
		return "<" + propertyName + ">" + value + "</" + propertyName + ">";
	}));
}
	
Directory.CreateDirectory(Path.GetDirectoryName(PropsFile));
File.WriteAllText(PropsFile, @"<?xml version=""1.0"" encoding=""utf-8""?>
<!-- Generated. Changes will be lost. -->
<Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
  <PropertyGroup>
" + props + @"
  </PropertyGroup>
</Project>
");
  
      ]]></Code>  
    </Task>  
  </UsingTask>  

  <Target Name="CreateBuildDir" >
    <MakeDir Directories="$(BuildDir)"/>
  </Target>

  <Target Name="RestorePackages" DependsOnTargets="CreateBuildDir" >
    <Exec Command="nuget restore &quot;$(SourceDir)\packages.config&quot;" />
    <Exec Command="nuget restore &quot;$(SourceDir)\$(ProductName).sln&quot;" />
    <CreatePackageVersionProps SolutionDir="$(SourceDir)" PropsFile="$(BuildDir)\obj\nuget.props" />
  </Target>
  
  <!-- This target puts the build.log file into the build directory -->
  <Target Name="Bootstrap" DependsOnTargets="RestorePackages" >
    <MakeDir Directories="$(BuildDir)\log" />
    <Exec Command="&quot;$(MSBuildBinPath)\msbuild.exe&quot; &quot;$(MSBuildProjectDir)Build.proj&quot; /verbosity:minimal /t:$(BuildTarget) &quot;/fileLoggerParameters:LogFile=$(BuildDir)\log\build.log;Verbosity=diagnostic;Encoding=UTF-8&quot;" />
  </Target>

</Project>
