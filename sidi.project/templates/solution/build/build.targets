<?xml version="1.0" encoding="utf-8"?>
<!-- Do not modify. Modify build.props and build.proj to customize the build
_CommentHeader_
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="$(BuildDir)\obj\nuget.props" />
  <Import Project="PackNugetToolPackage.task" />
  <Import Project="CopyToStage.task" />
  
  <PropertyGroup>
    <Configuration>Release</Configuration>
    <Platform>Any CPU</Platform>
  </PropertyGroup>

  <!-- Directories -->
	<PropertyGroup>
		<SourceDir>$([System.IO.Directory]::GetParent($(MSBuildProjectDirectory)))</SourceDir>
		<NugetPackagesDir>$(SourceDir)\..\packages</NugetPackagesDir>
		<TestDir>$(BuildDir)\test</TestDir>
		<StageDir>$(BuildDir)\stage</StageDir>
  </PropertyGroup>
  
  <!-- Tools -->
	<PropertyGroup>
		<NUnitConsole>$(NugetPackagesDir)\NUnit.ConsoleRunner.$(NugetPackageVersion_NUnit_ConsoleRunner)\tools\nunit3-console.exe</NUnitConsole>
		<Nuget>NuGet.exe</Nuget>
		<Git>git</Git>
    <GithubRelease>github-release.exe</GithubRelease>
    <GithubReleaseEnvironmentVariables>GITHUB_TOKEN=$(GITHUB_TOKEN);GITHUB_USER=$(GITHUB_USER);GITHUB_REPO=$(GITHUB_REPO)</GithubReleaseEnvironmentVariables>
  </PropertyGroup>

  <Import Project="$(NugetPackagesDir)\GitVersionTask.$(NugetPackageVersion_GitVersionTask)\Build\GitVersionTask.targets" />
  
  <Target Name="GetVersion">
		<GetVersion SolutionDirectory="$(SolutionDir)">
		  <Output TaskParameter="Major" PropertyName="GfvMajor" />
		  <Output TaskParameter="Minor" PropertyName="GfvMinor" />
		  <Output TaskParameter="Patch" PropertyName="GfvPatch" />
		  <Output TaskParameter="BuildMetaData" PropertyName="GfvBuildMetaData" />
		  <Output TaskParameter="FullBuildMetaData" PropertyName="GfvFullBuildMetaData" />
		  <Output TaskParameter="BranchName" PropertyName="GfvBranchName" />
		  <Output TaskParameter="Sha" PropertyName="GfvSha" />
		  <Output TaskParameter="MajorMinorPatch" PropertyName="GfvMajorMinorPatch" />
		  <Output TaskParameter="SemVer" PropertyName="GfvSemVer" />
		  <Output TaskParameter="LegacySemVer" PropertyName="GfvLegacySemVer" />
		  <Output TaskParameter="LegacySemVerPadded" PropertyName="GfvLegacySemVerPadded" />
		  <Output TaskParameter="FullSemVer" PropertyName="GfvFullSemVer" />
		  <Output TaskParameter="AssemblySemVer" PropertyName="GfvAssemblySemVer" />
		  <Output TaskParameter="NuGetVersion" PropertyName="GfvNuGetVersion" />
		  <Output TaskParameter="PreReleaseTag" PropertyName="GfvPreReleaseTag" />
		  <Output TaskParameter="PreReleaseTagWithDash" PropertyName="GfvPreReleaseTagWithDash" />
		  <Output TaskParameter="InformationalVersion" PropertyName="GfvInformationalVersion" />
		</GetVersion>
		<Message Text="$(GfvSemVer)" />
		<Message Text="$(GfvNuGetVersion)" />
		<Message Text="$(GfvInformationalVersion)" />
	</Target>

	<Target Name="Build" DependsOnTargets="GetVersion" >
    <MSBuild Projects="$(SourceDir)\$(ProductName).sln" Properties="Configuration=$(Configuration);Platform=$(Platform);BuildDir=$(BuildDir);Version=$(GfvNuGetVersion)" >
      <Output ItemName="Targets" TaskParameter="TargetOutputs" />
    </MSBuild>
	<Message Importance="high" Text="%(Targets.Identity)" />
	<Message Importance="high" Text="%(Targets.MSBuildSourceTargetName)" />
	<Message Importance="high" Text="%(Targets.MSBuildSourceProjectFile)" />
  </Target>

  <Target Name="Setup" DependsOnTargets="Build;BuildSetup">
  </Target>

  <Target Name="BuildSetup" DependsOnTargets="GetVersion;Stage">
  <MSBuild
        Projects="$(SourceDir)\wix\wix.wixproj" Properties="
          CompanyName=$(CompanyName);
          ProductName=$(ProductName);
          Version=$(GfvMajorMinorPatch);
          Description=$(GfvSemVer);
          Configuration=$(Configuration);
          Platform=$(Platform);
          OutputPath=$(BuildDir)\setup;
          BinDir=$(OutDir);
          SourceDir=$(SourceDir);
          UpgradeCode=$(UpgradeCode);
          IntermediateOutputPath=$(BaseIntermediateOutputPath)\setup\
          ">
      <Output ItemName="SetupFiles" TaskParameter="TargetOutputs"/>
    </MSBuild>
    <Message Text="@(SetupFiles, ' ')" />
  </Target>

  <Target Name="Tag" DependsOnTargets="GetVersion">
    <PropertyGroup>
      <ReleaseTag>v$(GfvFullSemVer)</ReleaseTag>
    </PropertyGroup>
    <Exec WorkingDirectory="$(SourceDir)" Command="$(Git) tag --force $(ReleaseTag)" />
  </Target>

  <Target Name="Test" DependsOnTargets="Build">
    <ItemGroup>
      <TestTargets Include="%(Targets.Identity)" Condition="$([System.Text.RegularExpressions.Regex]::IsMatch(%(Filename), '\.Test$'))"/>
    </ItemGroup>
    <Exec Command="&quot;$(NUnitConsole)&quot; --labels=On --work=&quot;$(TestDir)&quot; --result=&quot;$(TestDir)\TestResult.xml&quot; --labels=All @(TestTargets -> '&quot;%(Identity)&quot;', ' ')" />
  </Target>

  <Target Name="PackNugetPackages" DependsOnTargets="Build" >
    <PropertyGroup>
		<NugetDir>$(BuildDir)\nuget</NugetDir>
	</PropertyGroup>
	<PackNugetPackage Project="%(Targets.MSBuildSourceProjectFile)"  OutputDir="$(NugetDir)" >
      <Output ItemName="NugetPackages" TaskParameter="PackageFile" />
	</PackNugetPackage>
  </Target>

  <Target Name="Stage" DependsOnTargets="Build" >
    <PropertyGroup>
		<StageDir>$(BuildDir)\stage</StageDir>
	</PropertyGroup>
	<CopyToStage Source="%(Targets.Identity)" StageDir="$(StageDir)" />
  </Target>

  <Target Name="PackChocolateyPackage" DependsOnTargets="Stage" >
    <PropertyGroup>
		<ChocolateyDir>$(BuildDir)\Chocolatey</ChocolateyDir>
	</PropertyGroup>
	<PackNugetToolPackageFromStage StageDir="$(StageDir)" OutputDir="$(ChocolateyDir)" Version="$(GfvNuGetVersion)" Id="$(ProductName)" Company="$(CompanyName)" >
      <Output ItemName="ChocolateyPackages" TaskParameter="PackageFile" />
	</PackNugetToolPackageFromStage>
  </Target>

  <!-- Push chocolatey packages to feed -->
  <Target Name="PushChocolateyPackage" DependsOnTargets="PackChocolateyPackage" >
    <Exec WorkingDirectory="$(ReleaseDir)" Command="&quot;$(Nuget)&quot; push &quot;%(ChocolateyPackages.Identity)&quot; -ApiKey &quot;$(ChocolateyFeedApiKey)&quot; -Source &quot;$(ChocolateyFeed)&quot;" />
  </Target>

  <!-- Push nuget packages to feed -->
  <Target Name="PushNugetPackages" DependsOnTargets="PackNugetPackages" >
    <Exec Condition="'@(NugetPackages)' != ''" WorkingDirectory="$(ReleaseDir)" Command="&quot;$(Nuget)&quot; push &quot;%(NugetPackages.Identity)&quot; -ApiKey &quot;$(NugetFeedApiKey)&quot; -Source &quot;$(NugetFeed)&quot;" />
  </Target>

  <Target Name="Install" DependsOnTargets="Setup">
    <Exec Command="&quot;@(SetupFiles, ' ')&quot;" />
  </Target>
  
  <Target Name="PublishOnDropbox" DependsOnTargets="Setup" >
    <Copy SourceFiles="@(SetupFiles)" DestinationFolder="$(USERPROFILE)\Dropbox\app\$(ProductName)" />
  </Target>
  
  <Target Name="PublishStageOnDropbox" DependsOnTargets="Stage" >
    <ItemGroup>
		<StageFiles Include="$(StageDir)/**/*" />
	</ItemGroup>
	<Copy SourceFiles="@(StageFiles)" DestinationFolder="$(USERPROFILE)\Dropbox\app\$(ProductName)\bin\%(RecursiveDir)" />
  </Target>
  
  <Target Name="PublishAsGithubRelease" DependsOnTargets="Setup" >
    <Exec IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" Command="&quot;$(GithubRelease)&quot; release --tag $(ReleaseTag)" 
      EnvironmentVariables="$(GithubReleaseEnvironmentVariables)"
    />
    <Exec Command="&quot;$(GithubRelease)&quot; upload --tag $(ReleaseTag) --name &quot;$(ProductName)-$(GfvFullSemVer).msi&quot; --replace --file @(SetupFiles -> '&quot;%(Identity)&quot;', ' ')" 
      EnvironmentVariables="$(GithubReleaseEnvironmentVariables)"
    />
  </Target>
  
  <Target Name="Clean" >
    <RemoveDir Directories="$(BuildDir)" />
  </Target>

  <Target Name="Release" DependsOnTargets="Test;Setup;PublishOnDropbox;PublishStageOnDropbox;PushNugetPackages;PushChocolateyPackage;Tag" />
  
</Project>
