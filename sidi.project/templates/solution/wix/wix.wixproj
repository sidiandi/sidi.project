<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" InitialTargets="EnsureWixToolsetInstalled" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="..\build\Paths.props" />
  <PropertyGroup>
    <DefineSolutionProperties>false</DefineSolutionProperties>
    <Version Condition="$(Version) == ''">0.0.0.0</Version>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">x86</Platform>
    <ProductVersion>3.10</ProductVersion>
    <ProjectGuid>9773c4b9-6200-40be-a5b2-999da7a8f070</ProjectGuid>
    <SchemaVersion>2.0</SchemaVersion>
    <OutputName>$(ProductName)-$(Version)</OutputName>
    <OutputType>Package</OutputType>
    <OutputPath>package</OutputPath>

    <IntermediateOutputPath>$(BuildDir)\obj\wix</IntermediateOutputPath>
    <PdbOutputPath>$(BuildDir)\obj\wix</PdbOutputPath>
    <StageDirectory>$(BuildDir)\stage</StageDirectory>
    <OutDir>$(BuildDir)</OutDir>
    <HarvestDirectorySuppressCom>true</HarvestDirectorySuppressCom>
    <HarvestVerboseOutput>true</HarvestVerboseOutput>
    <HarvestDirectorySuppressRootDirectory>true</HarvestDirectorySuppressRootDirectory>
    <LinkerSuppressSpecificWarnings>1076</LinkerSuppressSpecificWarnings>
  </PropertyGroup>
  <ItemGroup>
    <HarvestDirectory Include="$(StageDirectory)">
      <DirectoryRefId>DataDir</DirectoryRefId>
      <SuppressRegistry>true</SuppressRegistry>
      <ComponentGroupName>ProductComponents</ComponentGroupName>
      <DirectoryRefId>INSTALLFOLDER</DirectoryRefId>
      <PreprocessorVariable>var.StageDirectory</PreprocessorVariable>
    </HarvestDirectory>
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Product.wxs" />
  </ItemGroup>
  <Import Project="$(WixTargetsPath)" Condition=" '$(WixTargetsPath)' != '' " />
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\WiX\v3.x\Wix.targets" Condition=" '$(WixTargetsPath)' == '' AND Exists('$(MSBuildExtensionsPath32)\Microsoft\WiX\v3.x\Wix.targets') " />
  <Target Name="EnsureWixToolsetInstalled" Condition=" '$(WixTargetsImported)' != 'true' ">
    <Error Text="The WiX Toolset v3.11 (or newer) build tools must be installed to build this project. To download the WiX Toolset, see http://wixtoolset.org/releases/" />
  </Target>
  <!--
	To modify your build process, add your task inside one of the targets below and uncomment it.
	Other similar extension points exist, see Wix.targets.
	<Target Name="BeforeBuild">
	</Target>
	<Target Name="AfterBuild">
	</Target>
	-->

  <UsingTask  
    TaskName="CopyPlugin"  
    TaskFactory="CodeTaskFactory"  
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll" >  
    <ParameterGroup>  
      <Source Required="true" />
      <Destination Required="true" />
    </ParameterGroup>  
    <Task>  
      <Reference Include="System.Xml" />
      <Reference Include="System.Xml.Linq" />  
      <Using Namespace="System.Xml.Linq" />  
      <Using Namespace="System.Text.RegularExpressions" />  
      <Code Type="Fragment" Language="cs"><![CDATA[  
      
		Action<string> EnsureParentDirectoryExists = (p) =>
		{
			var d = Path.GetDirectoryName(p);
			if (!Directory.Exists(d))
			{
				Directory.CreateDirectory(d);
			}
		};
	  
	  Action<string, string, string, string> DirectoryCopy = null;

	  DirectoryCopy = (string sourceDirName, string destDirName, string compareDirName, string relative) =>
	  {
		var s = Path.Combine(sourceDirName, relative);
		var c = Path.Combine(compareDirName, relative);
		var d = Path.Combine(destDirName, relative);
		
		if (File.Exists(s))
		{
			if (string.Equals(Path.GetExtension(s), ".pdb") || string.Equals(Path.GetExtension(s), ".xml"))
			{
				Console.WriteLine("skip {0} -> {1} because it is a build output", s, d);
				return;
			}
		
			if (File.Exists(c))
			{
				Console.WriteLine("skip {0} -> {1} because {2} exists.", s, d, c);
				return;
			}

			EnsureParentDirectoryExists(d);
			Console.WriteLine("{0} -> {1}", s, d);
			File.Copy(s, d);
		}
		else if (Directory.Exists(s))
		{
			foreach (var i in new DirectoryInfo(s).GetFileSystemInfos())
			{
				DirectoryCopy(sourceDirName, destDirName, compareDirName, Path.Combine(relative, i.Name));
			}
		}
	 };
	
	 DirectoryCopy(Path.Combine(Source, "bin"), Path.Combine(Destination, "plugin", Path.GetFileName(Source)), Destination, ".");
  
      ]]></Code>  
    </Task>  
  </UsingTask>  

  <Target Name="BeforeBuild">
    <PropertyGroup>
      <DefineConstants>
        Version=$(Version);
        Description=$(Description);
        CompanyName=$(CompanyName);
        ProductName=$(ProductName);
        Manufacturer=$(CompanyName);
        UpgradeCode=$(UpgradeCode);
        StageDirectory=$(StageDirectory);
        SourceDir=$(SourceDir);
        $(DefineConstants)
      </DefineConstants>
    </PropertyGroup>
  </Target>
</Project>